
require: rubocop-rails

# Override default Rubocop confg
# See https://github.com/bbatsov/rubocop

Layout/DotPosition:
  EnforcedStyle: leading

Layout/EmptyLineAfterGuardClause:
  # We disable this rule to allow each developer
  # to choose the appropriate style.
  #
  # For example, the following example couldn't reach
  # a consensus :
  #
  # odds = []
  # 10.times.each do |i|
  #   next if i % 2 == 0
  #
  #   odds << i
  # end
  #
  Enabled: false

Layout/SpaceInsideHashLiteralBraces:
  EnforcedStyle: space
  EnforcedStyleForEmptyBraces: no_space

##################################### Style ####################################

# Please keep rules in alphabetical order...

Style/ClassAndModuleChildren:
  # Checks the style of children definitions at classes and modules.
  #
  # Basically there are two different styles:
  #
  # `nested` - have each child on a separate line
  #   class Foo
  #     class Bar
  #     end
  #   end
  #
  # `compact` - combine definitions as much as possible
  #   class Foo::Bar
  #   end
  #
  # There are good reasons to use both, do not enforce this style.
  Enabled: false

Style/Documentation:
  Enabled: false

Style/DocumentationMethod:
  Enabled: true

Style/HashSyntax:
  EnforcedStyle: ruby19_no_mixed_keys
  SupportedStyles:
    # checks for 1.9 syntax (e.g. {a: 1}) for all symbol keys
    - ruby19
    # checks for hash rocket syntax for all hashes
    - hash_rockets
    # forbids mixed key syntaxes (e.g. {a: 1, :b => 2})
    - no_mixed_keys
    # enforces both ruby19 and no_mixed_keys styles
    - ruby19_no_mixed_keys
  # Force hashes that have a symbol value to use hash rockets
  UseHashRocketsWithSymbolValues: false
  # Do not suggest { a?: 1 } over { :a? => 1 } in ruby19 style
  PreferHashRocketsForNonAlnumEndingSymbols: false

# Do not enforce usage of `unless foo` over `if !foo`
Style/NegatedIf:
  Enabled: false

Style/NumericPredicate:
  # Disabled : depending on the context, we think it's a good thing
  # to have the choice between `> 0` and `positive?`.
  EnforcedStyle: comparison

Style/PercentLiteralDelimiters:
  # Why do we need different delimiters ?!
  # Always use the `()` delimiter
  PreferredDelimiters:
    default: '()'
    '%i': '()'
    '%I': '()'
    '%r': '()'
    '%w': '()'
    '%W': '()'

Style/RedundantReturn:
  # Allow usage of `return` keyword when it helps clarity.
  Enabled: false

Style/ReturnNil:
  # Favor usage of `return nil` in stead of `return`
  EnforcedStyle: return_nil

Style/StringLiterals:
  EnforcedStyle: double_quotes
  # If true, strings which span multiple lines using \ for continuation must
  # use the same type of quotes on each line.
  ConsistentQuotesInMultiline: true

# Since we always want to enforce double quotes, having single quotes on such
# places feels weird:
#
#   "Hello, #{APP_CONFIG['little_world']"
#
Style/StringLiteralsInInterpolation:
  EnforcedStyle: double_quotes

#################################### Metrics ###################################

# Please keep rules in alphabetical order...

Metrics/AbcSize:
  # Default 15 (9999 to disable it)
  # => cyclomatic complexity is better
  Max: 9999

Metrics/BlockLength:
  Exclude:
    - "spec/**/*"

Metrics/ClassLength:
  CountComments: false  # count full line comments?
  Max: 300

Metrics/ModuleLength:
  CountComments: false  # count full line comments?
  Max: 300

Metrics/MethodLength:
  CountComments: false  # count full line comments?
  Max: 20

# Enable only rule on the use of ActiveRecord save methods without bang!
Rails/SaveBang:
  Enabled: true
# Disable other Rails cops for now
Rails/ActionFilter:
  Enabled: false
Rails/ActiveRecordAliases:
  Enabled: false
Rails/ActiveRecordOverride:
  Enabled: false
Rails/ActiveSupportAliases:
  Enabled: false
Rails/ApplicationController:
  Enabled: false
Rails/ApplicationJob:
  Enabled: false
Rails/ApplicationMailer:
  Enabled: false
Rails/ApplicationRecord:
  Enabled: false
Rails/AssertNot:
  Enabled: false
Rails/BelongsTo:
  Enabled: false
Rails/Blank:
  Enabled: false
Rails/BulkChangeTable:
  Enabled: false
Rails/CreateTableWithTimestamps:
  Enabled: false
Rails/Date:
  Enabled: false
Rails/Delegate:
  Enabled: false
Rails/DelegateAllowBlank:
  Enabled: false
Rails/DynamicFindBy:
  Enabled: false
Rails/EnumHash:
  Enabled: false
Rails/EnumUniqueness:
  Enabled: false
Rails/EnvironmentComparison:
  Enabled: false
Rails/Exit:
  Enabled: false
Rails/FilePath:
  Enabled: false
Rails/FindBy:
  Enabled: false
Rails/FindEach:
  Enabled: false
Rails/HasAndBelongsToMany:
  Enabled: false
Rails/HasManyOrHasOneDependent:
  Enabled: false
Rails/HelperInstanceVariable:
  Enabled: false
Rails/HttpPositionalArguments:
  Enabled: false
Rails/HttpStatus:
  Enabled: false
Rails/IgnoredSkipActionFilterOption:
  Enabled: false
Rails/IndexBy:
  Enabled: false
Rails/IndexWith:
  Enabled: false
Rails/InverseOf:
  Enabled: false
Rails/LexicallyScopedActionFilter:
  Enabled: false
Rails/LinkToBlank:
  Enabled: false
Rails/NotNullColumn:
  Enabled: false
Rails/Output:
  Enabled: false
Rails/OutputSafety:
  Enabled: false
Rails/PluralizationGrammar:
  Enabled: false
Rails/Presence:
  Enabled: false
Rails/Present:
  Enabled: false
Rails/RakeEnvironment:
  Enabled: false
Rails/ReadWriteAttribute:
  Enabled: false
Rails/RedundantAllowNil:
  Enabled: false
Rails/RedundantReceiverInWithOptions:
  Enabled: false
Rails/ReflectionClassName:
  Enabled: false
Rails/RefuteMethods:
  Enabled: false
Rails/RelativeDateConstant:
  Enabled: false
Rails/RequestReferer:
  Enabled: false
Rails/ReversibleMigration:
  Enabled: false
Rails/SafeNavigation:
  Enabled: false
Rails/SafeNavigationWithBlank:
  Enabled: false
Rails/ScopeArgs:
  Enabled: false
Rails/SkipsModelValidations:
  Enabled: false
Rails/TimeZone:
  Enabled: false
Rails/UniqBeforePluck:
  Enabled: false
Rails/UniqueValidationWithoutIndex:
  Enabled: false
Rails/UnknownEnv:
  Enabled: false
Rails/Validation:
  Enabled: false
